// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/open-feature/flagd/pkg/sync/grpc (interfaces: FlagSyncServiceSyncFlagsClient)

// Package grpc is a generated GoMock package.
package mock

import (
	"buf.build/gen/go/open-feature/flagd/grpc/go/sync/v1/syncv1grpc"
	syncv1 "buf.build/gen/go/open-feature/flagd/protocolbuffers/go/sync/v1"
	"context"
	gomock "github.com/golang/mock/gomock"
	"google.golang.org/grpc"
	reflect "reflect"
)

// MockFlagSyncServiceSyncFlagsClient is a mock of FlagSyncServiceSyncFlagsClient interface
type MockFlagSyncServiceSyncFlagsClient struct {
	ctrl     *gomock.Controller
	recorder *MockFlagSyncServiceSyncFlagsClientMockRecorder
	grpc.ClientStream
}

// MockFlagSyncServiceSyncFlagsClientMockRecorder is the mock recorder for MockFlagSyncServiceSyncFlagsClient
type MockFlagSyncServiceSyncFlagsClientMockRecorder struct {
	mock *MockFlagSyncServiceSyncFlagsClient
}

// NewMockFlagSyncServiceSyncFlagsClient creates a new mock instance
func NewMockFlagSyncServiceSyncFlagsClient(ctrl *gomock.Controller) *MockFlagSyncServiceSyncFlagsClient {
	mock := &MockFlagSyncServiceSyncFlagsClient{ctrl: ctrl}
	mock.recorder = &MockFlagSyncServiceSyncFlagsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlagSyncServiceSyncFlagsClient) EXPECT() *MockFlagSyncServiceSyncFlagsClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockFlagSyncServiceSyncFlagsClient) Recv() (*syncv1.SyncFlagsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*syncv1.SyncFlagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockFlagSyncServiceSyncFlagsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFlagSyncServiceSyncFlagsClient)(nil).Recv))
}

// MockFlagSyncServiceClient is a mock of FlagSyncServiceClient interface
type MockFlagSyncServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFlagSyncServiceClientMockRecorder
}

// MockFlagSyncServiceClientMockRecorder is the mock recorder for MockFlagSyncServiceClient
type MockFlagSyncServiceClientMockRecorder struct {
	mock *MockFlagSyncServiceClient
}

// NewMockFlagSyncServiceClient creates a new mock instance
func NewMockFlagSyncServiceClient(ctrl *gomock.Controller) *MockFlagSyncServiceClient {
	mock := &MockFlagSyncServiceClient{ctrl: ctrl}
	mock.recorder = &MockFlagSyncServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFlagSyncServiceClient) EXPECT() *MockFlagSyncServiceClientMockRecorder {
	return m.recorder
}

// FetchAllFlags mocks base method
func (m *MockFlagSyncServiceClient) FetchAllFlags(arg0 context.Context, arg1 *syncv1.FetchAllFlagsRequest, arg2 ...grpc.CallOption) (*syncv1.FetchAllFlagsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAllFlags", varargs...)
	ret0, _ := ret[0].(*syncv1.FetchAllFlagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllFlags indicates an expected call of FetchAllFlags
func (mr *MockFlagSyncServiceClientMockRecorder) FetchAllFlags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllFlags", reflect.TypeOf((*MockFlagSyncServiceClient)(nil).FetchAllFlags), varargs...)
}

// SyncFlags mocks base method
func (m *MockFlagSyncServiceClient) SyncFlags(arg0 context.Context, arg1 *syncv1.SyncFlagsRequest, arg2 ...grpc.CallOption) (syncv1grpc.FlagSyncService_SyncFlagsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncFlags", varargs...)
	ret0, _ := ret[0].(syncv1grpc.FlagSyncService_SyncFlagsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncFlags indicates an expected call of SyncFlags
func (mr *MockFlagSyncServiceClientMockRecorder) SyncFlags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFlags", reflect.TypeOf((*MockFlagSyncServiceClient)(nil).SyncFlags), varargs...)
}
